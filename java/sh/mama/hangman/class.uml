@startuml
package activities{
package sh.mama.hangman.activities

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputMethodManager
import android.widget.EditText
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import kotlinx.android.synthetic.main.activity_create_context.*
import sh.mama.hangman.observer.IObserver
import sh.mama.hangman.observer.ConcreteWords
import sh.mama.hangman.observer.ConcreteWords.getCategory
import sh.mama.hangman.R
import sh.mama.hangman.adapters.WordAdapter
import sh.mama.hangman.models.Category
import sh.mama.hangman.models.Word

class EditCategoryActivity : AppCompatActivity(), IObserver {
    private lateinit var category: Category

    override fun update() {
        printButtons(getCategory(this.category.title).words)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_create_context)
        ConcreteWords.add(this)
        this.category = intent.getSerializableExtra("category") as Category
        abort.setOnClickListener { finish() }
        create_context.setOnClickListener {
            val create = Intent(this, EditWordActivity::class.java)
            create.putExtra("word", Word(category = category.title))
            create.putExtra("create", true)
            startActivity(create)
        }
        printButtons(category.words)
    }

    override fun onDestroy() {
        super.onDestroy()
        ConcreteWords.remove(this)
    }

    private fun printButtons(data: MutableList<Word>) {
        val adapter = WordAdapter(data)
        word_list.adapter = adapter
        word_list.layoutManager = LinearLayoutManager(this)
    }

    private fun EditText.onSubmit(func: () -> Unit) {
        setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                val imm =
                    context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
                imm.hideSoftInputFromWindow(windowToken, 0)
                func()
            }
            true
        }
    }

}package sh.mama.hangman.activities

import android.content.Context
import android.graphics.Color
import android.os.Bundle
import android.view.View
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputMethodManager
import android.widget.Button
import android.widget.EditText
import android.widget.RelativeLayout
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.forEach
import androidx.core.view.get
import kotlinx.android.synthetic.main.activity_add_words.*
import sh.mama.hangman.observer.ConcreteWords
import sh.mama.hangman.observer.IObserver
import sh.mama.hangman.R
import sh.mama.hangman.enumerators.RequestType
import sh.mama.hangman.models.Word

class EditWordActivity : AppCompatActivity(), IObserver {
    private var creating = false
    private var difficulty = 1

    override fun update() {
        finish()
    }

    override fun onDestroy() {
        super.onDestroy()
        ConcreteWords.remove(this)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_add_words)
        var word = intent.getSerializableExtra("word") as Word?
        this.creating = intent.getSerializableExtra("create") as Boolean
        if (word == null) word = Word()
        else this.difficulty = word.difficulty

        ConcreteWords.add(this)

        if (this.creating) {
            word_delete.visibility = View.GONE
        } else {
            word_delete.isActivated = true
            word_delete.setOnClickListener {
                if (it.isActivated) {
                    ConcreteWords.update(word!!, RequestType.DELETE)
                    it.isActivated = false
                } else {
                    Toast.makeText(this, "You already clicked the button.", Toast.LENGTH_SHORT)
                        .show()
                }
            }
        }
        createButtons()

        word_add.isActivated = true
        word_add.setOnClickListener {
            if (it.isActivated) {
                word = updateFromFields(word!!)
                if (creating) {
                    ConcreteWords.update(word!!, RequestType.POST)
                } else {
                    ConcreteWords.update(word!!, RequestType.PUT)
                }
            } else {
                Toast.makeText(this, "You already clicked the button.", Toast.LENGTH_SHORT).show()
            }
            it.isActivated = false
        }
        word_abort.setOnClickListener { finish() }
        fillData(word!!)
    }

    private fun EditText.onSubmit(func: () -> Unit) {
        setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                val imm =
                    context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
                imm.hideSoftInputFromWindow(windowToken, 0)
                func()
            }
            true
        }
    }

    private fun updateFromFields(word: Word): Word {
        word.word = word_word.text.toString()
        word.category = word_category.text.toString()
        word.description = word_description.text.toString()
        word.hint1 = word_hint1.text.toString()
        word.hint2 = word_hint2.text.toString()
        word.hint3 = word_hint3.text.toString()
        word.difficulty = this.difficulty
        return word
    }

    private fun fillData(word: Word) {
        word_word.setText(word.word)
        word_description.setText(word.description)
        word_hint1.setText(word.hint1)
        word_hint2.setText(word.hint2)
        word_hint3.setText(word.hint3)
        word_category.setText(word.category)
        val button = word_difficulty[word.difficulty - 1] as Button
        button.setBackgroundColor(Color.GRAY)
    }

    private fun createButtons() {
        for (i in 1..10) {
            val button = Button(this)
            button.layoutParams = RelativeLayout.LayoutParams(
                RelativeLayout.LayoutParams.WRAP_CONTENT,
                RelativeLayout.LayoutParams.WRAP_CONTENT
            )
            button.text = "$i"
            button.layoutParams.height = 100
            button.layoutParams.width = 100
            button.setTextColor(Color.GREEN)
            button.textSize = 10F
            button.setBackgroundColor(Color.BLACK)
            button.setOnClickListener {
                word_difficulty.forEach { that ->
                    that.setBackgroundColor(Color.BLACK)
                }
                it.setBackgroundColor(Color.GRAY)
                this.difficulty = i
            }
            word_difficulty.addView(button)
        }
    }
}package sh.mama.hangman.activities

import android.graphics.Color
import android.os.Bundle
import android.view.Gravity
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import kotlinx.android.synthetic.main.activity_end_game.*
import sh.mama.hangman.observer.ConcreteScores
import sh.mama.hangman.observer.IObserver
import sh.mama.hangman.R
import sh.mama.hangman.adapters.HighScoreAdapter
import sh.mama.hangman.enumerators.RequestType
import sh.mama.hangman.models.HighScore
import sh.mama.hangman.models.Word
import kotlin.system.exitProcess

class EndGameActivity : AppCompatActivity(), IObserver {
    private lateinit var word: Word

    override fun update() {
        printScore()
    }

    override fun onDestroy() {
        super.onDestroy()
        ConcreteScores.remove(this)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_end_game)
        val won = intent.getSerializableExtra("won") as Boolean
        val score = intent.getSerializableExtra("score") as HighScore?
        this.word = intent.getSerializableExtra("word") as Word

        ConcreteScores.add(this)

        word_word.text = word.word

        play_again_btn.setOnClickListener {
            finish()
        }

        printScore()

        if (won) {
            word_word.setTextColor(Color.GREEN)
            state_image.setImageResource(R.drawable.win)
            word_description.text = word.description
            if (score != null){
                ConcreteScores.update(score,RequestType.POST)
            }

        } else {
            word_word.setTextColor(Color.RED)
            state_image.setImageResource(R.drawable.h)
            word_description.text = "You need to win do get the description."
            word_description.gravity = Gravity.CENTER_HORIZONTAL
        }

    }

    private fun printScore() {
        val adapter = HighScoreAdapter(ConcreteScores.getHighScoreFromWord(this.word), false)
        highscore_list.adapter = adapter
        highscore_list.layoutManager = LinearLayoutManager(this)
    }

    private fun end() {
        moveTaskToBack(true)
        exitProcess(-1)
    }
}

package sh.mama.hangman.activities

import android.content.Intent
import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import kotlinx.android.synthetic.main.activity_end_game.highscore_list
import kotlinx.android.synthetic.main.activity_highscore.*
import sh.mama.hangman.observer.ConcreteScores
import sh.mama.hangman.R
import sh.mama.hangman.enumerators.ActionType
import sh.mama.hangman.adapters.HighScoreAdapter

class HighScoreActivity : AppCompatActivity() {
    private var global = true
    private var categoryTitle: String? = ""
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_highscore)
        this.categoryTitle = intent.getStringExtra("category")
        if (categoryTitle != null) {
            this.global = false
            headline.text = categoryTitle
            category_btn.visibility = View.GONE
        } else {
            category_btn.setOnClickListener {
                val intent = Intent(this, PickCategoryActivity::class.java)
                intent.putExtra("actionType", ActionType.HIGHSCORES)
                startActivity(intent)
            }
        }
        printScore()
    }

    private fun printScore() {
        val highScores = if (global) {
            ConcreteScores.getOverAllHighScores()
        } else {
            ConcreteScores.getHighScoreFromCategory(this.categoryTitle!!)
        }
        val adapter = HighScoreAdapter(highScores, true)
        highscore_list.adapter = adapter
        highscore_list.layoutManager = LinearLayoutManager(this)
    }
}

package sh.mama.hangman.activities

import android.content.Intent
import android.os.Bundle
import android.view.animation.AlphaAnimation
import androidx.appcompat.app.AppCompatActivity
import kotlinx.android.synthetic.main.activity_main.*
import sh.mama.hangman.R
import sh.mama.hangman.enumerators.ActionType
import sh.mama.hangman.observer.ConcreteScores
import sh.mama.hangman.observer.ConcreteWords
import kotlin.system.exitProcess

class MainActivity : AppCompatActivity() {
    private val buttonClick = AlphaAnimation(1F, 0.1F)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        ConcreteWords.cache()
        ConcreteScores.cache()

        play.setOnClickListener {
            it.startAnimation(buttonClick)
            val game = Intent(this, PickCategoryActivity::class.java)
            game.putExtra("actionType", ActionType.GAME)
            startActivity(game)
        }
        create_categories.setOnClickListener {
            it.startAnimation(buttonClick)
            val create = Intent(this, PickCategoryActivity::class.java)
            create.putExtra("actionType", ActionType.EDIT)
            startActivity(create)
        }
        watch_highscores.setOnClickListener {
            it.startAnimation(buttonClick)
            val watchHighScores = Intent(this, HighScoreActivity::class.java)
            startActivity(watchHighScores)
        }
        add_word_button.setOnClickListener {
            it.startAnimation(buttonClick)
            val addWord = Intent(this, EditWordActivity::class.java)
            addWord.putExtra("create", true)
            startActivity(addWord)
        }
        exit.setOnClickListener {
            it.startAnimation(buttonClick)
            end()
        }
    }

    private fun end() {
        moveTaskToBack(true)
        exitProcess(-1)
    }
}

package sh.mama.hangman.activities

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import kotlinx.android.synthetic.main.activity_pick_context.*
import sh.mama.hangman.observer.ConcreteWords
import sh.mama.hangman.observer.IObserver
import sh.mama.hangman.R
import sh.mama.hangman.enumerators.ActionType
import sh.mama.hangman.adapters.CategoryAdapter
import sh.mama.hangman.models.Category

class PickCategoryActivity : AppCompatActivity(), IObserver {
    private lateinit var actionType: ActionType

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_pick_context)
        this.actionType = intent.getSerializableExtra("actionType") as ActionType
        ConcreteWords.add(this)
        if (ConcreteWords.isNull()) {
            ConcreteWords.cache()
        } else {
            printButtons(ConcreteWords.getCategories())
        }
    }

    override fun update() {
        printButtons(ConcreteWords.getCategories())
    }

    override fun onDestroy() {
        super.onDestroy()
        ConcreteWords.remove(this)
    }

    private fun printButtons(data: List<Category>) {
        val adapter = CategoryAdapter(data, this.actionType)
        categories.adapter = adapter
        categories.layoutManager = LinearLayoutManager(this)
    }
}package sh.mama.hangman.activities

import android.content.Intent
import android.os.Bundle
import android.os.CountDownTimer
import android.view.LayoutInflater
import android.view.animation.AlphaAnimation
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import kotlinx.android.synthetic.main.activity_game.*
import sh.mama.hangman.R
import sh.mama.hangman.models.Game
import sh.mama.hangman.models.HighScore
import sh.mama.hangman.models.Letter
import sh.mama.hangman.models.Word

class PlayGameActivity : AppCompatActivity() {
    private lateinit var game: Game
    private lateinit var name: String
    private var time = 0
    private var hintCounter = 1
    private val letters = ArrayList<TextView>()
    private lateinit var countDownTimer: CountDownTimer

    override fun onDestroy() {
        super.onDestroy()
        countDownTimer.cancel()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_game)
        val word = intent.getSerializableExtra("word") as Word
        this.name = intent.getSerializableExtra("name") as String
        word.make()
        game = Game(word)
        createWord()
        state.setImageResource(game.hangman.getState())
        generateKeyboard()


        countDownTimer = object : CountDownTimer(60 * 1000 * 3, 1000) {
            override fun onTick(p0: Long) {
                time = (p0 / 1000).toInt()
                val minutes = p0 / 1000 / 60
                val seconds = p0 / 1000 % 60
                if (seconds > 9) {
                    game_time.text = "0$minutes:$seconds"
                } else {
                    game_time.text = "0$minutes:0$seconds"
                }
            }

            override fun onFinish() {
                endGame(false)
            }
        }.start()

        game_hint.setOnClickListener {
            val des = AlertDialog.Builder(this)
            des.setTitle("HINT $this.hintCounter")
            if (this.hintCounter == 1)
                des.setMessage(game.word.hint1)
            if (this.hintCounter == 2)
                des.setMessage(game.word.hint2)
            if (this.hintCounter == 3)
                des.setMessage(game.word.hint3)
            des.setPositiveButton("OK") { a, b -> }
            des.show()
            hintCounter++
        }
    }

    private fun createWord() {
        for (letter in game.word.letters) {
            val x = TextView(this)
            x.layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.WRAP_CONTENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
            x.layoutParams.width = 75
            x.textSize = 24F
            x.text = "_"
            x.isActivated = false
            letters.add(x)
            bogstaver.addView(x)
        }
    }

    private fun updateWord() {
        game.word.letters.forEachIndexed { i, letter ->
            if (letter.isGuessed()) {
                letters[i].text = game.word.letters[i].toString()
            }
        }
    }

    private fun generateKeyboard() {
        for (option in game.options) {
            val button = createButton(option.toString()) { guess(it, option) }
            buttons.addView(button)
        }
    }

    private fun guess(button: Button, letter: Letter) {
        if (button.isActivated) {
            val stillAlive = game.guess(letter)
            if (!stillAlive) {
                endGame(false)
            } else {
                button.text = ""
                button.isActivated = false
                updateWord()
                if (game.isDone()) {
                    endGame(true)
                } else {
                    state.setImageResource(game.hangman.getState())
                }
            }
        } else {
            Toast.makeText(this, "Its not a choice!", Toast.LENGTH_SHORT).show()
        }
    }

    private val buttonClick = AlphaAnimation(1F, 0.8F)
    private fun createButton(title: String, function: (button: Button) -> Unit): Button {
        val inflater = LayoutInflater.from(this)
        val button = inflater.inflate(R.layout.button_letter, null, false) as Button
        button.text = title
        button.isActivated = true
        button.setOnClickListener {
            button.startAnimation(buttonClick)
            function(button)
        }
        return button
    }

    private fun endGame(won: Boolean) {
        val intent = Intent(this, EndGameActivity::class.java)
        if (won) {
            val score = HighScore(
                null,
                name,
                this.time,
                this.hintCounter,
                this.game.hangman.level,
                this.game.word
            )
            intent.putExtra("score", score)
        }
        intent.putExtra("won", won)
        intent.putExtra("word", this.game.word)
        startActivity(intent)
        finish()
    }
}

package sh.mama.hangman.activities

import android.content.Intent
import android.os.Bundle
import android.view.animation.AlphaAnimation
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import kotlinx.android.synthetic.main.activity_start_game.*
import sh.mama.hangman.R
import sh.mama.hangman.models.Word

class StartGameActivity : AppCompatActivity() {
    private val buttonClick = AlphaAnimation(1F, 0.1F)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_start_game)

        val word = intent.getSerializableExtra("word") as Word

        start_game.setOnClickListener {
            it.startAnimation(buttonClick)
            var name = ""
            name = player_name.text.toString()
            if (name == "")
                Toast.makeText(this, "You have to pick a name", Toast.LENGTH_SHORT).show()
            else {
                val intent = Intent(this, PlayGameActivity::class.java)
                intent.putExtra("name", name)
                intent.putExtra("word", word)
                startActivity(intent)
                finish()
            }
        }

    }
}

}
package adapters{
}
package enumerators{
}
package libs{
}
package models{
}
package observer{
}
@enduml
