@startuml
skinparam linetype ortho
class ConcreteScores << (O,#FF7700) >> implements ICache {
    url: String
    type: Type
    content: ArrayList<*>
    observers: ArrayList<IObserver>
    getHighScoreFromWord(word: Word): List<HighScore>
    getHighScoreFromCategory(category: String): List<HighScore>
    getOverAllHighScores(): List<HighScore>
    setHighScores(scores: ArrayList<HighScore>)
    order(scores: ArrayList<HighScore>): List<HighScore>
}

ConcreteScores -d-> models.HighScore

class ConcreteWords << (O,#FF7700) >> implements ICache {
    url: String
    type: Type
    content: ArrayList<*>
    observers: ArrayList<IObserver>
    isNull(): Boolean
    getCategories(): ArrayList<Category>
    getCategory(title: String): Category
    setWords(words: ArrayList<Word>)
}

ConcreteWords --> models.Word
ConcreteWords --> models.Category

interface ICache implements IObservable {
    type: Type
    url: String
    content: ArrayList<*>
    cache()
    update(model: Any, method: RequestType)
}

ICache -> DataGetter

interface IObservable {
    observers: ArrayList<IObserver>
    add(observer: IObserver)
    remove(observer: IObserver)
    sendUpdateEvent()
}

IObservable --r-> IObserver

interface IObserver {
    update()
}

class models.Category <Serializable> {
    title: String
    words: ArrayList<Word>
    getOne(): Word
}

models.Category --> models.Word

class models.Game {
    word: Word
    hangman: Hangman
    options: List<Letter>
    isDone(): Boolean
    guess(letter: Letter): Boolean
}

models.Game -l-> models.Word
models.Game -l-> models.Letter
models.Game --> models.HangMan

class models.HangMan {
    - level
    - states: List<Drawable>
    kill(): Boolean
    getState(): Int
}

class models.HighScore <Serializable>{
    ID: String?,
    player: String,
    time: Int,
    hints: Int,
    wrongs: Int,
    word: Word
    getScore():Int
}

models.HighScore -r-> models.Word

class models.Letter <Serializable>{
    letter: Char
    guessed: Boolean
    init()
    isGuessed(): Boolean
    guess(letter: Letter): Boolean
    toString(): String
}

class models.Word <Serializable> {
    ID: String 
    word: String 
    difficulty: Int 
    description: String 
    hint1: String 
    hint2: String 
    hint3: String 
    category: String 
    letters: List<Letter>
    make()
}

models.Word --> models.Letter

class DataGetter << (O,#FF7700) >> {
    getStuff(url: String, type: Type): T
    updateStuff(model: Any, url: String, action: RequestType)
}

DataGetter -d-> RequestType

enum ActionType {
    EDIT
    GAME
    HIGHSCORES
}

enum RequestType {
    POST
    GET
    PUT
    DELETE
}

package adapters {

class CategoryAdapter <RecyclerView.Adapter> {
    - categories: List<Category>,
    - action: Enum<ActionType>
    - buttonClick:AlphaAnimation
    onCreateViewHolder(parent: ViewGroup, viewType: Int): CategoryViewHolder
    onBindViewHolder(holder: CategoryViewHolder, position: Int)
    getItemCount(): Int
}

CategoryAdapter +-- CategoryViewHolder

class CategoryViewHolder <RecyclerView.ViewHolder>{
    itemView: View
}

class WordAdapter <RecyclerView.Adapter> {
    - words: List<Word>,
    - buttonClick:AlphaAnimation
    onCreateViewHolder(parent: ViewGroup, viewType: Int): WordViewHoler
    onBindViewHolder(holder: WordViewHoler, position: Int)
    getItemCount(): Int
}

WordAdapter +-- WordViewHoler

class WordViewHoler <RecyclerView.ViewHolder> {
    itemView: View
}

class HighScoreAdapter <RecyclerView.Adapter> {
    - scores: List<HighScore>,
    - withWords: Boolean,
    onCreateViewHolder(parent: ViewGroup, viewType: Int): HighScoreViewHolder
    onBindViewHolder(holder: HighScoreViewHolder, position: Int)
    getItemCount(): Int
}

HighScoreAdapter +-- HighScoreViewHolder

class HighScoreViewHolder <RecyclerView.ViewHolder>{
    itemView: View
}

}

package observables {

class EditCategoryActivity <AppCompatActivity> implements IObserver {
    - category: Category
    - printButtons(data: MutableList<Word>) 
    - EditText.onSubmit(func: () -> Unit) 
    update() 
    onCreate(savedInstanceState: Bundle?) 
    onDestroy() 
}

EditCategoryActivity --> models.Category

class EditWordActivity <AppCompatActivity> implements IObserver {
    - creating: Boolean 
    - difficulty: Int
    - EditText.onSubmit(func: () -> Unit) 
    - updateFromFields(word: Word): Word 
    - fillData(word: Word) 
    - createButtons() 
    onDestroy() 
    onCreate(savedInstanceState: Bundle?) 
}

class EndGameActivity <AppCompatActivity> implements IObserver {
    - word: Word
    - printScore() 
    update() 
    onDestroy() 
    onCreate(savedInstanceState: Bundle?) 
    
}

EndGameActivity -l-> models.Word

class HighScoreActivity <AppCompatActivity> implements IObserver {
    - global: Boolean
    - categoryTitle: String?
    - printScore() 
    onCreate(savedInstanceState: Bundle?) 
    update() 
    onDestroy() 
}

class PickCategoryActivity <AppCompatActivity> implements IObserver {
    - actionType: ActionType
    - printButtons(data: List<Category>) 
    onCreate(savedInstanceState: Bundle?) 
    update() 
    onDestroy() 
}

PickCategoryActivity -u-> ActionType
PickCategoryActivity ----> WordAdapter
PickCategoryActivity ----> CategoryAdapter
PickCategoryActivity ----> HighScoreAdapter

}

class MainActivity <AppCompatActivity> {
    - buttonClick: AlphaAnimation
    - end() 
    onCreate(savedInstanceState: Bundle?) 
}
class PlayGameActivity <AppCompatActivity> {
    - game: Game
    - name: String
    - time: Int
    - hintCounter: Int
    - letters: ArrayList<TextView>
    - countDownTimer: CountDownTimer
    - buttonClick: AlphaAnimation
    - createWord() 
    - updateWord() 
    - generateKeyboard() 
    - guess(button: Button, letter: Letter) 
    - createButton(title: String, function: (button: Button) -> Unit): Button 
    - endGame(won: Boolean) 
    onDestroy() 
    onCreate(savedInstanceState: Bundle?) 
}

PlayGameActivity -l-> models.Game
class StartGameActivity <AppCompatActivity> {
    - buttonClick: AlphaAnimation
    onCreate(savedInstanceState: Bundle?) 
}


@enduml
